plugins {
	id 'java-library'
    id 'checkstyle'
}

group = 'com.hazelcast.spring'
version = '4.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
}

ext {
	springSessionVersion = project.properties['springSessionVersion'] ?: '4.0.0-SNAPSHOT'
	springFrameworkVersion = project.properties['springFrameworkVersion'] ?: '7.0.0-M9'
	springSecurityVersion = project.properties['springSecurityVersion'] ?: '7.0.0-M3'
	hazelcastVersion = project.properties['hazelcastVersion'] ?: '5.6.0'
	jakartaServletVersion = '6.1.0'
	junitVersion = '5.12.1'
	mockitoVersion = '5.16.1'
	assertjVersion = '3.27.3'
	testcontainersVersion = '1.20.6'
}

// Configure source sets for integration tests
sourceSets {
	integrationTest {
		java {
			srcDir 'src/integration-test/java'
		}
		resources {
			srcDir 'src/integration-test/resources'
		}
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
}

check.dependsOn integrationTest

dependencies {
	api "org.springframework.session:spring-session-core:${springSessionVersion}"

	api "com.hazelcast:hazelcast:${hazelcastVersion}"

	// Spring Framework
	api "org.springframework:spring-context:${springFrameworkVersion}"
	implementation "org.springframework:spring-beans:${springFrameworkVersion}"
	implementation "org.springframework:spring-core:${springFrameworkVersion}"

	// Test dependencies
	testImplementation "jakarta.servlet:jakarta.servlet-api:${jakartaServletVersion}"
	testImplementation "org.assertj:assertj-core:${assertjVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
	testImplementation "org.springframework.security:spring-security-core:${springSecurityVersion}"
	testImplementation "org.springframework:spring-test:${springFrameworkVersion}"
	testImplementation "org.springframework:spring-web:${springFrameworkVersion}"

	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"

	integrationTestImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat = "full"
	}
}

String enableCodeCov = System.properties['codeCoverage'] as String ?: "false";
if (Boolean.parseBoolean(enableCodeCov)) {
    println("Enabling code coverage checks")
    apply from: 'jacoco.gradle'
}
